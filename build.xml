<?xml version="1.0" encoding="UTF-8"?>
<project name="vlewrapper" default="make-jar" basedir=".">
        <property name="warfile.name" value="target/vlewrapper.war" />
        <property name="classfiles.path" value="WebContent/WEB-INF/classes" />
        <property name="deploy.dir" value="target" />
        <path id="application.classpath">
           <fileset dir="WebContent/WEB-INF/lib">
              <include name="**/*"/>
           </fileset>
           <fileset dir="src" />
        </path>
    <target name="make-jar">
        <javac srcdir="src" destdir="${classfiles.path}" classpathref="application.classpath"/>
        <jar destfile="WebContent/WEB-INF/lib/vlewrapper-classes.jar" basedir="WebContent/WEB-INF/classes" excludes="**/*.jar">
          <fileset dir="src"
               includes="**/*.json" />
           <fileset dir="src"
               includes="**/*.xml" />
            <manifest>
            </manifest>
        </jar>
    </target>
<!-- CURRENTLY BROKEN.
INSTEAD, TO DEPLOY TO TOMCAT/WEBAPPS, do the following:
1. run "ant make-jar". this will update WebContent/WEB-INF/lib/vlewrapper-classes.jar
2. copy over WebContent/* to TOMCAT/WEBAPPS/vlewrapper
3. restart tomcat.
This approach works because WebContent is already laid out in the way that can be deployed in tomcat.
        <target name="build-war">
            <javac srcdir="src" destdir="${classfiles.path}" classpathref="application.classpath"/>
            <war destfile="${warfile.name}" webxml="WebContent/WEB-INF/web.xml">
                <fileset dir="WebContent">
                        <exclude name="samplecurriculum/**/*" />
                        <exclude name="curriculum/**/*" />
                </fileset>
                <classes dir="${classfiles.path}" />
            </war>
        </target>
-->
</project>

